// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/mailing": {
            "get": {
                "summary": "Get mailing list.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "page number, start from 1",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mailings list",
                        "schema": {
                            "$ref": "#/definitions/mailsender.MailingList"
                        }
                    },
                    "400": {
                        "description": "page error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "DB error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "summary": "Add mailing in queue.",
                "parameters": [
                    {
                        "description": "mailing info",
                        "name": "template",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Mailing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Not valid mailing info",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "DB error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mailing/{mailing_id}": {
            "get": {
                "summary": "Get mailing by id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mailing id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "mailing",
                        "schema": {
                            "$ref": "#/definitions/model.Mailing"
                        }
                    },
                    "400": {
                        "description": "Not found mailing with id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "DB error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "mailsender.Info": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "mailing id",
                    "type": "string"
                },
                "status": {
                    "description": "mailing status",
                    "type": "string"
                }
            }
        },
        "mailsender.MailingList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mailsender.Info"
                    }
                },
                "total": {
                    "description": "total pages",
                    "type": "integer"
                }
            }
        },
        "model.Mailing": {
            "type": "object",
            "properties": {
                "attempts": {
                    "description": "attempts send",
                    "type": "integer"
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Receiver"
                    }
                },
                "status": {
                    "description": "Status:\n* 0 - Pending.\n* 1 - Done.\n* 2 - Error.",
                    "type": "integer",
                    "enum": [
                        0,
                        1,
                        2
                    ]
                },
                "subject": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "model.Receiver": {
            "type": "object",
            "properties": {
                "addr": {
                    "type": "string"
                },
                "isSended": {
                    "type": "boolean"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "petstore.swagger.io",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Mailsender",
	Description: "Service send mail to receivers.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
